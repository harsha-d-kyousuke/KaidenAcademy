import { CodingChallenge } from '../types';

export const challenges: CodingChallenge[] = [
  // --- JavaScript ---
  {
    id: "js_vars_01",
    challengeId: "js_vars_01",
    title: "Variable Scopes",
    language: "javascript",
    difficulty: "beginner",
    type: "mcq",
    question: "What is the value of 'x' outside the if block? `if (true) { let x = 10; } console.log(x);`",
    options: ["10", "undefined", "null", "ReferenceError"],
    correctIndex: 3,
    explanation: "'let' creates a block-scoped variable. 'x' only exists inside the if block and cannot be accessed outside, resulting in a ReferenceError.",
    reward: { intellect: 5, xp: 10, energy: -2 },
    tutorialStep: "Well done, adventurer! You've grasped the essence of variables. Every powerful spell needs a named container for its energy, just like every program needs variables to hold data. Your journey continues!"
  },
  {
    id: "js_loops_01",
    challengeId: "js_loops_01",
    title: "For Loop Basics",
    language: "javascript",
    difficulty: "beginner",
    type: "mcq",
    question: "What will this code print? `for(let i=0; i<3; i++){console.log(i)}`",
    options: ["0 1 2", "1 2 3", "0 1 2 3", "Error"],
    correctIndex: 0,
    explanation: "The loop runs while i < 3, printing 0, 1, and 2. When i becomes 3, the condition i < 3 is false, and the loop terminates.",
    reward: { intellect: 5, xp: 10, energy: -3 },
  },
  {
    id: "js_code_01_sum",
    challengeId: "js_code_01_sum",
    title: "Sum of Two Numbers",
    language: "javascript",
    difficulty: "beginner",
    type: "code",
    functionName: "sum",
    question: "Write a function named `sum` that takes two numbers, `a` and `b`, as arguments and returns their sum.",
    starterCode: `function sum(a, b) {\n  // Your code here\n\n}`,
    testCases: [
      { input: [2, 3], expected: 5, description: "Should handle positive integers" },
      { input: [-5, 10], expected: 5, description: "Should handle negative numbers" },
      { input: [0, 0], expected: 0, description: "Should handle zeros" }
    ],
    reward: { intellect: 10, xp: 25, energy: -5 },
  },
  {
    id: "js_code_02_max",
    challengeId: "js_code_02_max",
    title: "Find Max Number",
    language: "javascript",
    difficulty: "beginner",
    type: "code",
    functionName: "findMax",
    question: "Write a function `findMax` that takes an array of numbers and returns the largest number in the array. If the array is empty, it should return `undefined`.",
    starterCode: `function findMax(numbers) {\n  // Your code here\n\n}`,
    testCases: [
      { input: [[1, 2, 3, 4, 5]], expected: 5, description: "Positive numbers" },
      { input: [[-1, -5, -2]], expected: -1, description: "Negative numbers" },
      { input: [[10, 0, -10, 5]], expected: 10, description: "Mixed numbers" },
      { input: [[]], expected: undefined, description: "Empty array" }
    ],
    reward: { intellect: 12, xp: 30, energy: -6 },
  },
   {
    id: "js_code_03_reverse",
    challengeId: "js_code_03_reverse",
    title: "Reverse a String",
    language: "javascript",
    difficulty: "beginner",
    type: "code",
    functionName: "reverseString",
    question: "Write a function `reverseString` that takes a string and returns the string reversed.",
    starterCode: `function reverseString(str) {\n  // Your code here\n\n}`,
    testCases: [
      { input: ["hello"], expected: "olleh", description: "Simple word" },
      { input: ["Kaiden"], expected: "nediaK", description: "Capitalized word" },
      { input: ["racecar"], expected: "racecar", description: "A palindrome" }
    ],
    reward: { intellect: 12, xp: 30, energy: -6 },
  },
  {
    id: "js_code_04_palindrome",
    challengeId: "js_code_04_palindrome",
    title: "Palindrome Checker",
    language: "javascript",
    difficulty: "intermediate",
    type: "code",
    functionName: "isPalindrome",
    question: "Write a function `isPalindrome` that checks if a string is the same forwards and backwards. It should be case-insensitive and ignore non-alphanumeric characters.",
    starterCode: `function isPalindrome(str) {\n  // Your code here\n\n}`,
    testCases: [
      { input: ["racecar"], expected: true, description: "Simple palindrome" },
      { input: ["Madam"], expected: true, description: "Case-insensitive palindrome" },
      { input: ["A man, a plan, a canal: Panama"], expected: true, description: "Complex palindrome with punctuation" },
      { input: ["hello"], expected: false, description: "Not a palindrome" }
    ],
    reward: { intellect: 15, xp: 40, energy: -8, health: -1 },
  },
   {
    id: "js_code_05_fizzbuzz",
    challengeId: "js_code_05_fizzbuzz",
    title: "FizzBuzz",
    language: "javascript",
    difficulty: "intermediate",
    type: "code",
    functionName: "fizzBuzz",
    question: "Write a function `fizzBuzz` that takes a number `n` and returns an array of numbers from 1 to `n`. However, for multiples of three, use 'Fizz' instead of the number, for the multiples of five use 'Buzz', and for numbers which are multiples of both three and five use 'FizzBuzz'.",
    starterCode: `function fizzBuzz(n) {\n  // Your code here\n\n}`,
    testCases: [
      { input: [5], expected: [1, 2, "Fizz", 4, "Buzz"], description: "Test with n = 5" },
      { input: [15], expected: [1, 2, "Fizz", 4, "Buzz", "Fizz", 7, 8, "Fizz", "Buzz", 11, "Fizz", 13, 14, "FizzBuzz"], description: "Test with n = 15" },
      { input: [3], expected: [1, 2, "Fizz"], description: "Test with n = 3" }
    ],
    reward: { intellect: 18, xp: 50, energy: -10, health: -2 },
  },
  {
    id: "js_ds_01_hashmap",
    challengeId: "js_ds_01_hashmap",
    title: "Contains Duplicate",
    language: "javascript",
    difficulty: "intermediate",
    type: "code",
    functionName: "containsDuplicate",
    question: "Given an array of integers, return `true` if any value appears at least twice in the array, and `false` if every element is distinct.",
    starterCode: `function containsDuplicate(nums) {\n  // Your code here\n\n}`,
    testCases: [
      { input: [[1, 2, 3, 1]], expected: true, description: "Contains a duplicate" },
      { input: [[1, 2, 3, 4]], expected: false, description: "All distinct" },
      { input: [[1, 1, 1, 3, 3, 4, 3, 2, 4, 2]], expected: true, description: "Multiple duplicates" }
    ],
    reward: { intellect: 20, xp: 55, energy: -12, health: -2 },
  },
  {
    id: "js_ds_02_revlist",
    challengeId: "js_ds_02_revlist",
    title: "Reverse Linked List",
    language: "javascript",
    difficulty: "intermediate",
    type: "code",
    functionName: "reverseList",
    question: "Given the `head` of a singly linked list, reverse the list, and return the new head.\n\nThe ListNode class is available for you:\n`class ListNode {\n  constructor(val, next) {\n    this.val = (val===undefined ? 0 : val);\n    this.next = (next===undefined ? null : next);\n  }\n}`",
    starterCode: `var reverseList = function(head) {\n  // Your code here\n\n};`,
    testCases: [
      { input: [[1,2,3,4,5]], expected: [5,4,3,2,1] },
      { input: [[1,2]], expected: [2,1] },
      { input: [[]], expected: [] }
    ],
    reward: { intellect: 25, xp: 70, energy: -15, health: -3 },
  },
  {
    id: "js_ds_03_maxtree",
    challengeId: "js_ds_03_maxtree",
    title: "Max Depth of Binary Tree",
    language: "javascript",
    difficulty: "intermediate",
    type: "code",
    functionName: "maxDepth",
    question: "Given the `root` of a binary tree, return its maximum depth. The max depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\nThe TreeNode class is available for you:\n`class TreeNode {\n  constructor(val, left, right) {\n    this.val = (val===undefined ? 0 : val);\n    this.left = (left===undefined ? null : left);\n    this.right = (right===undefined ? null : right);\n  }\n}`",
    starterCode: `var maxDepth = function(root) {\n  // Your code here\n\n};`,
    testCases: [
      { input: [[3,9,20,null,null,15,7]], expected: 3 },
      { input: [[1,null,2]], expected: 2 },
      { input: [[]], expected: 0 },
      { input: [[0]], expected: 1 }
    ],
    reward: { intellect: 25, xp: 70, energy: -15, health: -3 },
  },
  {
    id: "js_async_01",
    challengeId: "js_async_01",
    title: "Async/Await",
    language: "javascript",
    difficulty: "advanced",
    type: "mcq",
    question: "What is the primary purpose of the `await` keyword in JavaScript?",
    options: ["To declare a function as asynchronous.", "To handle errors in promises.", "To pause execution until a Promise settles.", "To run code in parallel."],
    correctIndex: 2,
    explanation: "The `await` operator is used to wait for a Promise to be resolved or rejected. It can only be used inside an `async` function.",
    reward: { intellect: 10, xp: 25, energy: -5, health: -1 },
  },
  {
    id: "js_types_01",
    challengeId: "js_types_01",
    title: "Type Coercion",
    language: "javascript",
    difficulty: "intermediate",
    type: "mcq",
    question: "What is the result of `console.log('5' + 5)`?",
    options: ["10", "'55'", "55", "Error"],
    correctIndex: 1,
    explanation: "The '+' operator performs string concatenation when one of the operands is a string, so it converts the number 5 to a string and joins them.",
    reward: { intellect: 7, xp: 15, energy: -3 }
  },
  {
    id: "js_functions_01",
    challengeId: "js_functions_01",
    title: "Arrow Functions",
    language: "javascript",
    difficulty: "intermediate",
    type: "mcq",
    question: "Which syntax defines a correct arrow function?",
    options: ["const add = (a, b) => a + b;", "function add(a, b) => a + b;", "const add = function(a, b) => a + b;", "const add => (a, b) { a + b };"],
    correctIndex: 0,
    explanation: "Arrow functions provide a concise syntax for writing function expressions. They are defined using a parameter list `(a, b)`, followed by `=>`, and then the function body.",
    reward: { intellect: 7, xp: 15, energy: -2 }
  },
  // --- Python ---
  {
    id: "py_list_01",
    challengeId: "py_list_01",
    title: "List Slicing",
    language: "python",
    difficulty: "beginner",
    type: "mcq",
    question: "What is the output of this code? `my_list = [10, 20, 30, 40]; print(my_list[1:3])`",
    options: ["[10, 20, 30]", "[20, 30, 40]", "[20, 30]", "[10, 20]"],
    correctIndex: 2,
    explanation: "List slicing `[start:end]` extracts a portion of the list. It includes the element at the 'start' index but excludes the element at the 'end' index.",
    reward: { intellect: 5, xp: 10, energy: -2 }
  },
  {
    id: "py_func_02",
    challengeId: "py_func_02",
    title: "Built-in Functions",
    language: "python",
    difficulty: "intermediate",
    type: "mcq",
    question: "What does this code output? `print(sum([1,2,3]))`",
    options: ["123", "6", "[1,2,3]", "Error"],
    correctIndex: 1,
    explanation: "The built-in sum() function in Python takes an iterable (like a list) and returns the sum of its items.",
    reward: { intellect: 6, xp: 15, energy: -2 }
  },
  {
    id: "py_dict_01",
    challengeId: "py_dict_01",
    title: "Dictionary Access",
    language: "python",
    difficulty: "intermediate",
    type: "mcq",
    question: "How do you get the value 'apple' from `data = {'fruit': 'apple', 'color': 'red'}`?",
    options: ["data('fruit')", "data['fruit']", "data.fruit", "get.data('fruit')"],
    correctIndex: 1,
    explanation: "Dictionary values in Python are accessed using their keys in square brackets.",
    reward: { intellect: 7, xp: 15, energy: -3 }
  },
  {
    id: "py_datastruct_01",
    challengeId: "py_datastruct_01",
    title: "Python Tuples",
    language: "python",
    difficulty: "beginner",
    type: "mcq",
    question: "Which of the following is true about tuples in Python?",
    options: ["They are mutable.", "They are defined with square brackets [].", "They are immutable.", "They can only contain integers."],
    correctIndex: 2,
    explanation: "Tuples are ordered, immutable collections of elements, defined with parentheses (). Once created, their elements cannot be changed.",
    reward: { intellect: 6, xp: 12, energy: -2 }
  },
  // --- Java ---
  {
    id: "java_class_01",
    challengeId: "java_class_01",
    title: "Class Definition Basics",
    language: "java",
    difficulty: "beginner",
    type: "mcq",
    question: "Which keyword is used to define a class in Java?",
    options: ["define", "class", "function", "struct"],
    correctIndex: 1,
    explanation: "In Java, the 'class' keyword is used to declare a new class, which serves as a blueprint for creating objects.",
    reward: { intellect: 5, xp: 12, energy: -3 }
  },
  {
    id: "java_types_01",
    challengeId: "java_types_01",
    title: "Primitive Types",
    language: "java",
    difficulty: "beginner",
    type: "mcq",
    question: "Which of these is NOT a primitive data type in Java?",
    options: ["int", "boolean", "String", "char"],
    correctIndex: 2,
    explanation: "'String' is an object in Java, not a primitive type. Primitive types (like int, char, boolean) are the basic data types and are not objects.",
    reward: { intellect: 5, xp: 12, energy: -3 }
  },
  {
    id: "java_methods_01",
    challengeId: "java_methods_01",
    title: "Method Overloading",
    language: "java",
    difficulty: "intermediate",
    type: "mcq",
    question: "What is method overloading in Java?",
    options: ["Defining two methods with the same name but different parameters.", "Overriding a method in a subclass.", "A method that calls itself.", "A method that can return multiple types."],
    correctIndex: 0,
    explanation: "Method overloading allows a class to have multiple methods with the same name, as long as their parameter lists are different (either by number of parameters or type of parameters).",
    reward: { intellect: 7, xp: 15, energy: -3 }
  },
  // --- Algorithms ---
  {
    id: "algo_ds_01",
    challengeId: "algo_ds_01",
    title: "Data Structures",
    language: "algo",
    difficulty: "intermediate",
    type: "mcq",
    question: "Which data structure operates on a 'First-In, First-Out' (FIFO) basis?",
    options: ["Stack", "Queue", "Tree", "Array"],
    correctIndex: 1,
    explanation: "A Queue follows the FIFO principle, where the first element added is the first one to be removed, just like a line of people.",
    reward: { intellect: 7, xp: 15, energy: -4 }
  },
  {
    id: "algo_sort_01",
    challengeId: "algo_sort_01",
    title: "Sorting Complexity",
    language: "algo",
    difficulty: "advanced",
    type: "mcq",
    question: "What is the average time complexity of QuickSort?",
    options: ["O(n^2)", "O(n log n)", "O(n)", "O(log n)"],
    correctIndex: 1,
    explanation: "QuickSort has an average and best-case time complexity of O(n log n). Its worst-case complexity is O(n^2), but this is rare in practice.",
    reward: { intellect: 8, xp: 20, energy: -5, health: -2 }
  },
];
